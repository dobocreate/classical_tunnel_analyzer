"""Streamlit app for Murayama tunnel stability analysis."""
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from src.models import (
    TunnelGeometry, SoilParameters, LoadingConditions, 
    MurayamaInput, MurayamaResult
)
from src.murayama import MurayamaCalculator, get_default_presets
from src.report_generator import ReportGenerator, generate_markdown_report
import io
import base64
from datetime import datetime


# Page configuration
st.set_page_config(
    page_title="ÊùëÂ±±Âºè„Éà„É≥„Éç„É´ÂÆâÂÆöÊÄßËß£Êûê",
    page_icon="üöá",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Title and description
st.title("üöá ÊùëÂ±±Âºè„Éà„É≥„Éç„É´ÂÆâÂÆöÊÄßË©ï‰æ°")
st.markdown("""
„Åì„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅØÊùëÂ±±Ê≥ï„ÇíÁî®„ÅÑ„Å¶„Éà„É≥„Éç„É´ÂàáÁæΩ„ÅÆÂÆâÂÆöÊÄß„ÇíË©ï‰æ°„Åó„Åæ„Åô„ÄÇ
„Éà„É≥„Éç„É´ÂΩ¢Áä∂„Å®Âú∞Áõ§„Éë„É©„É°„Éº„Çø„ÇíÂÖ•Âäõ„Åó„Å¶„ÄÅÊäµÊäóÂäõÊõ≤Á∑ö„Å®ÊúÄÂ§ßÊäµÊäóÂäõ„ÇíË®àÁÆó„Åó„Åæ„Åô„ÄÇ
""")

# Sidebar inputs
st.sidebar.header("ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø")

# Preset selection
st.sidebar.subheader("Âú∞Áõ§„Éó„É™„Çª„ÉÉ„Éà")
presets = get_default_presets()
preset_names = ["„Ç´„Çπ„Çø„É†"] + [p.name for p in presets]
selected_preset = st.sidebar.selectbox("Âú∞Áõ§„Çø„Ç§„Éó„ÇíÈÅ∏Êäû", preset_names)

# Initialize default values
if selected_preset != "„Ç´„Çπ„Çø„É†":
    preset = next(p for p in presets if p.name == selected_preset)
    default_gamma = preset.soil.gamma
    default_c = preset.soil.c
    default_phi = preset.soil.phi
    default_u = preset.typical_loading.u
    default_sigma_v = preset.typical_loading.sigma_v
else:
    default_gamma = 20.0
    default_c = 30.0
    default_phi = 30.0
    default_u = 0.0
    default_sigma_v = 0.0

# Tunnel geometry inputs
st.sidebar.subheader("„Éà„É≥„Éç„É´ÂΩ¢Áä∂")
height = st.sidebar.number_input(
    "„Éà„É≥„Éç„É´ÂàáÁæΩÈ´ò„Åï H [m]", 
    min_value=0.1, 
    max_value=50.0, 
    value=10.0, 
    step=0.5,
    help="„Éà„É≥„Éç„É´ÂàáÁæΩ„ÅÆÈ´ò„Åï"
)
r0 = st.sidebar.number_input(
    "ÂàùÊúüÂçäÂæÑ r‚ÇÄ [m]", 
    min_value=0.1, 
    max_value=20.0, 
    value=5.0, 
    step=0.5,
    help="ÂØæÊï∞Ëû∫Êóã„ÅÆÂàùÊúüÂçäÂæÑ"
)

# Soil parameter inputs
st.sidebar.subheader("Âú∞Áõ§„Éë„É©„É°„Éº„Çø")
gamma = st.sidebar.slider(
    "Âçò‰Ωç‰ΩìÁ©çÈáçÈáè Œ≥ [kN/m¬≥]", 
    min_value=10.0, 
    max_value=30.0, 
    value=default_gamma, 
    step=0.5,
    help="Âú∞Áõ§„ÅÆÊúâÂäπÂçò‰Ωç‰ΩìÁ©çÈáçÈáè"
)
c = st.sidebar.slider(
    "Á≤òÁùÄÂäõ c [kPa]", 
    min_value=0.0, 
    max_value=200.0, 
    value=default_c, 
    step=5.0,
    help="Âú∞Áõ§„ÅÆÁ≤òÁùÄÂäõ"
)
phi = st.sidebar.slider(
    "ÂÜÖÈÉ®Êë©Êì¶Ëßí œÜ [¬∞]", 
    min_value=0.0, 
    max_value=60.0, 
    value=default_phi, 
    step=1.0,
    help="Âú∞Áõ§„ÅÆÂÜÖÈÉ®Êë©Êì¶Ëßí"
)

# Loading conditions
st.sidebar.subheader("Ëç∑ÈáçÊù°‰ª∂")
u = st.sidebar.number_input(
    "Ê∞¥Âúß u [kPa]", 
    min_value=0.0, 
    max_value=1000.0, 
    value=default_u, 
    step=10.0,
    help="ÈñìÈöôÊ∞¥Âúß"
)
sigma_v = st.sidebar.number_input(
    "‰∏äËºâËç∑Èáç œÉ·µ• [kPa]", 
    min_value=0.0, 
    max_value=5000.0, 
    value=default_sigma_v, 
    step=50.0,
    help="ÈâõÁõ¥‰∏äËºâËç∑Èáç"
)

# Analysis parameters
st.sidebar.subheader("Ëß£ÊûêË®≠ÂÆö")
max_B = st.sidebar.number_input(
    "ÊúÄÂ§ß„Åô„Åπ„ÇäÂπÖ [m]", 
    min_value=1.0, 
    max_value=50.0, 
    value=20.0, 
    step=1.0
)

# Create input objects
geometry = TunnelGeometry(height=height, r0=r0)
soil = SoilParameters(gamma=gamma, c=c, phi=phi)
loading = LoadingConditions(u=u, sigma_v=sigma_v)
murayama_input = MurayamaInput(
    geometry=geometry,
    soil=soil,
    loading=loading,
    max_B=max_B
)

# Calculate button
if st.sidebar.button("Ë®àÁÆóÂÆüË°å", type="primary", use_container_width=True):
    with st.spinner("Ë®àÁÆó‰∏≠..."):
        # Perform calculation
        calculator = MurayamaCalculator(murayama_input)
        result = calculator.calculate_curve()
        
        # Store result in session state
        st.session_state['result'] = result
        st.session_state['input'] = murayama_input

# Main area - Results display
if 'result' in st.session_state:
    result = st.session_state['result']
    input_params = st.session_state['input']
    
    # Create columns for layout
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Plot P-B curve
        st.subheader("P-BÊõ≤Á∑öÔºàÊäµÊäóÂäõ vs „Åô„Åπ„ÇäÂπÖÔºâ")
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=result.B_values,
            y=result.P_values,
            mode='lines',
            name='P-BÊõ≤Á∑ö',
            line=dict(color='blue', width=2)
        ))
        
        # Add maximum point
        fig.add_trace(go.Scatter(
            x=[result.B_critical],
            y=[result.P_max],
            mode='markers',
            name=f'ÊúÄÂ§ßÊäµÊäóÂäõ P_max = {result.P_max:.1f} kN/m',
            marker=dict(color='red', size=12, symbol='star')
        ))
        
        fig.update_layout(
            xaxis_title="„Åô„Åπ„ÇäÂπÖ B [m]",
            yaxis_title="ÊäµÊäóÂäõ P [kN/m]",
            hovermode='closest',
            showlegend=True,
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Display key results
        st.subheader("ÁµêÊûú„ÅÆÊ¶ÇË¶Å")
        
        st.metric("ÊúÄÂ§ßÊäµÊäóÂäõ P_max", f"{result.P_max:.1f} kN/m")
        st.metric("Ëá®ÁïåÂπÖ B_critical", f"{result.B_critical:.2f} m")
        
        if result.safety_factor:
            st.metric("ÂÆâÂÖ®Áéá", f"{result.safety_factor:.2f}")
            
            # Safety assessment
            if result.safety_factor >= 1.5:
                st.success("‚úÖ ÂÆâÂÖ® (FS ‚â• 1.5)")
            elif result.safety_factor >= 1.2:
                st.warning("‚ö†Ô∏è Ë¶ÅÊ≥®ÊÑè (1.2 ‚â§ FS < 1.5)")
            else:
                st.error("‚ùå Âç±Èô∫ (FS < 1.2)")
        
        # Input parameters summary
        st.subheader("ÂÖ•Âäõ„Éë„É©„É°„Éº„Çø")
        params_df = pd.DataFrame({
            '„Éë„É©„É°„Éº„Çø': ['H [m]', 'r‚ÇÄ [m]', 'Œ≥ [kN/m¬≥]', 'c [kPa]', 'œÜ [¬∞]', 'u [kPa]', 'œÉ·µ• [kPa]'],
            'ÂÄ§': [
                input_params.geometry.height,
                input_params.geometry.r0,
                input_params.soil.gamma,
                input_params.soil.c,
                input_params.soil.phi,
                input_params.loading.u,
                input_params.loading.sigma_v
            ]
        })
        st.dataframe(params_df, hide_index=True)
    
    # Export options
    st.subheader("ÁµêÊûú„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„Éà")
    col1, col2 = st.columns(2)
    
    with col1:
        # CSV export
        csv_data = pd.DataFrame({
            'B [m]': result.B_values,
            'P [kN/m]': result.P_values
        })
        csv_string = csv_data.to_csv(index=False)
        st.download_button(
            label="CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
            data=csv_string,
            file_name="murayama_results.csv",
            mime="text/csv"
        )
    
    with col2:
        # PDF Report generation
        if st.button("PDF„É¨„Éù„Éº„ÉàÁîüÊàê"):
            with st.spinner("PDF„É¨„Éù„Éº„Éà„ÇíÁîüÊàê‰∏≠..."):
                report_gen = ReportGenerator(input_params, result)
                pdf_bytes = report_gen.generate_pdf()
                
                st.download_button(
                    label="PDF„É¨„Éù„Éº„Éà„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
                    data=pdf_bytes,
                    file_name=f"murayama_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                    mime="application/pdf"
                )

else:
    # No results yet
    st.info("üëà „Çµ„Ç§„Éâ„Éê„Éº„Å´„Éë„É©„É°„Éº„Çø„ÇíÂÖ•Âäõ„Åó„ÄÅ„ÄåË®àÁÆóÂÆüË°å„Äç„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Ëß£Êûê„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    
    # Show example image or description
    st.subheader("ÊùëÂ±±Ê≥ï„Å´„Å§„ÅÑ„Å¶")
    st.markdown("""
    ÊùëÂ±±Ê≥ï„ÅØ‰ª•‰∏ã„ÇíËÄÉÊÖÆ„Åó„Å¶„Éà„É≥„Éç„É´ÂàáÁæΩ„ÅÆÂÆâÂÆöÊÄß„ÇíËß£Êûê„Åó„Åæ„ÅôÔºö
    - ÂØæÊï∞Ëû∫ÊóãÁ†¥Â£äÈù¢
    - „Åô„Åπ„ÇäÂúüÂ°ä„ÅÆ„É¢„Éº„É°„É≥„ÉàÂùáË°°
    - Âú∞Áõ§„ÅÆÁ≤òÁùÄÂäõ„Å®Êë©Êì¶
    - Ê∞¥Âúß„ÅÆÂΩ±Èüø
    - Â§ñÈÉ®Ëç∑ÈáçÊù°‰ª∂
    
    „Åì„ÅÆÊâãÊ≥ï„ÅØ„ÄÅ„Åô„Åπ„ÇäÂπÖB„ÅÆÈñ¢Êï∞„Å®„Åó„Å¶ÂøÖË¶ÅÊäµÊäóÂäõP„ÇíË®àÁÆó„Åó„ÄÅ
    ÂàáÁæΩ„ÅåÊèê‰æõ„Åß„Åç„ÇãÊúÄÂ§ßÊäµÊäóÂäõP_max„ÇíÊ±∫ÂÆö„Åó„Åæ„Åô„ÄÇ
    """)

# Footer
st.markdown("---")
st.caption("ÊùëÂ±±Âºè„Éà„É≥„Éç„É´ÂÆâÂÆöÊÄßËß£Êûê v0.1 | ÊùëÂ±± (1984) „Å´Âü∫„Å•„Åè")